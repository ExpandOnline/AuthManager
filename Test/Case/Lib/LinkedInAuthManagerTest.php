<?php
App::uses('LinkedInAuthManager', 'AuthManager.Lib/LinkedIn');
App::uses('MockLeague', 'AuthManager.Test/Case/Lib');

/**
 * Class LinkedInAuthManagerTest
 *
 * @property Model MediaPlatformUser
*/
class LinkedInAuthManagerTest extends CakeTestCase {

/**
 * @var array
 */
	public $fixtures = array(
		'plugin.AuthManager.MediaPlatformUser',
		'plugin.AuthManager.OAuthToken'
	);


	public function setUp() {
		parent::setUp(); // TODO: Change the autogenerated stub
		$this->MediaPlatformUser = $this->getMockForModel('AuthManager.MediaPlatformUser', null);
		$this->date = date('Y-m-d H:i:s', strtotime('+1 hour'));
	}

	/**
 *
 */
	public function testAuthenticateUser() {
		$manager = $this->getMockManager();
		$request = new Object();
		$request->query = array('code' => 'xyz');
		$manager->authenticateUser($request);
		$user = $this->MediaPlatformUser->find('first', array(
			'conditions' => array(
				'MediaPlatformUser.id' => $this->MediaPlatformUser->getLastInsertID()
			),
			'contain' => array(
				'OauthToken'
			)
		));

		$this->assertEquals(MediaPlatform::LINKED_IN, $user['MediaPlatformUser']['media_platform_id']);
		$this->assertEquals('Peter Vaasjes', $user['MediaPlatformUser']['username']);
		$this->assertEquals($this->date, $user['OauthToken']['token_expires']);
		$this->assertEquals('1234', $user['OauthToken']['access_token']);
		$this->assertEquals('4321', $user['OauthToken']['refresh_token']);
	}


	protected function getMockManager() {

		$manager = $this->getMock('LinkedInAuthManager', array(
			'_getLeague', '_getAccessToken', '_getUsername'
		), array(), '', false);
		$manager->MediaPlatformUser = $this->MediaPlatformUser;

		$accessToken = new League\OAuth2\Client\Token\AccessToken([
			'access_token' => '1234',
			'refresh_token' => '4321',
			'expires' => strtotime($this->date),
		]);

		$mockLeague = new MockLeague();
		$mockLeague->setAccessToken($accessToken);
		$leagueWrapper = new LeagueOauthWrapper(new MockLeague());
		$manager->expects($this->any())->method('_getLeague')->will($this->returnValue($leagueWrapper));
		$manager->expects($this->once())->method('_getAccessToken')->will($this->returnValue($accessToken));
		$manager->expects($this->once())->method('_getUsername')->will($this->returnValue('Peter Vaasjes'));

		return $manager;
	}

}